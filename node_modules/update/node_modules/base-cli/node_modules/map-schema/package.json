{
  "name": "map-schema",
  "description": "Normalize an object by running normalizers and validators that are mapped to a schema.",
  "version": "0.1.1",
  "homepage": "https://github.com/jonschlinkert/map-schema",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jonschlinkert/map-schema"
  },
  "bugs": {
    "url": "https://github.com/jonschlinkert/map-schema/issues"
  },
  "license": "MIT",
  "files": [
    "index.js",
    "lib/"
  ],
  "main": "index.js",
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "arr-union": "^3.0.0",
    "collection-visit": "^0.2.1",
    "get-value": "^2.0.2",
    "kind-of": "^3.0.2",
    "lazy-cache": "^1.0.3",
    "mixin-deep": "^1.1.3",
    "omit-empty": "^0.3.2",
    "set-value": "^0.3.2",
    "sort-object-arrays": "^0.1.1",
    "union-value": "^0.2.1"
  },
  "devDependencies": {
    "gulp": "^3.9.0",
    "gulp-eslint": "^1.1.1",
    "gulp-format-md": "^0.1.4",
    "gulp-istanbul": "^0.10.3",
    "gulp-mocha": "^2.2.0",
    "isobject": "^2.0.0",
    "mocha": "*",
    "stringify-author": "^0.1.3",
    "try-open": "^0.1.0"
  },
  "keywords": [
    "map",
    "schema"
  ],
  "verb": {
    "related": {
      "list": [
        "normalize-pkg"
      ]
    },
    "plugins": [
      "gulp-format-md"
    ],
    "layout": "default",
    "reflinks": [
      "normalize-pkg",
      "isobject"
    ]
  },
  "readme": "# map-schema [![NPM version](https://img.shields.io/npm/v/map-schema.svg)](https://www.npmjs.com/package/map-schema) [![Build Status](https://img.shields.io/travis/jonschlinkert/map-schema.svg)](https://travis-ci.org/jonschlinkert/map-schema)\n\n> Normalize an object by running normalizers and validators that are mapped to a schema.\n\n- [Install](#install)\n- [Usage](#usage)\n- [API](#api)\n- [Related projects](#related-projects)\n- [Running tests](#running-tests)\n- [Contributing](#contributing)\n- [Author](#author)\n- [License](#license)\n\n_(TOC generated by [verb](https://github.com/verbose/verb) using [markdown-toc](https://github.com/jonschlinkert/markdown-toc))_\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm i map-schema --save\n```\n\n## Usage\n\n```js\nvar schema = require('map-schema');\n```\n\n**Example**\n\nThis is a basic example schema for normalizing and validating fields on `package.json` (a full version of this will be available on [normalize-pkg](https://github.com/jonschlinkert/normalize-pkg/) when complete):\n\n```js\nvar fs = require('fs');\nvar isObject = require('isobject');\nvar Schema = require('map-schema');\n\nvar schema = new Schema()\n  .field('name', 'string')\n  .field('description', 'string')\n  .field('repository', ['object', 'string'], {\n    normalize: function(val) {\n      return isObject(val) ? val.url : val;\n    }\n  })\n  .field('main', 'string', {\n    validate: function(filepath) {\n      console.log(filepath)\n      return fs.existsSync(filepath);\n    }\n  })\n  .field('version', 'string', {\n    default: '0.1.0'\n  })\n  .field('license', 'string', {\n    default: 'MIT'\n  })\n\nvar pkg = require('./package');\nconsole.log(schema.normalize(pkg));\nconsole.log(schema.errors);\n```\n\n**Errors**\n\nValidation errors are exposed on `schema.errors`. Error reporting is pretty basic right now but I plan to implement something better soon.\n\n## API\n\n### [Schema](index.js#L39)\n\nCreate a new `Schema` with the given `options`.\n\n**Params**\n\n* `options` **{Object}**\n\n**Example**\n\n```js\nvar schema = new Schema()\n  .field('name', 'string')\n  .field('version', 'string')\n  .field('license', 'string')\n  .field('licenses', {\n    validate: function(val, key) {\n      this.error(key, 'licenses is deprecated. use \"license\" instead.');\n    }\n  })\n  .normalize(require('./package'))\n```\n\n### [.error](index.js#L68)\n\nPush an error onto the `schema.errors` array. Placeholder for\nbetter error handling and a reporter (planned).\n\n**Params**\n\n* `method` **{String}**: The name of the method where the error is recorded.\n* `prop` **{String}**: The name of the field for which the error is being created.\n* `message` **{String}**: The error message.\n* `value` **{String}**: The value associated with the error.\n* `returns` **{any}**\n\n### [.field](index.js#L109)\n\nAdd a field to the schema with the given `name`, `type` or types, and options.\n\n**Params**\n\n* `name` **{String}**\n* `type` **{String|Array}**\n* `options` **{Object}**\n* `returns` **{Object}**: Returns the instance for chaining.\n\n**Example**\n\n```js\nvar semver = require('semver');\n\nschema\n  .field('keywords', 'array')\n  .field('version', 'string', {\n    validate: function(val, key, config, schema) {\n      return semver.valid(val) !== null;\n    }\n  })\n```\n\n### [.get](index.js#L162)\n\nGet field `name` from the schema. Get a specific property from the field by passing the property name as a second argument.\n\n**Params**\n\n* `name` **{Strign}**\n* `prop` **{String}**\n* `returns` **{Object|any}**: Returns the field instance or the value of `prop` if specified.\n\n**Example**\n\n```js\nschema.field('bugs', ['object', 'string']);\nvar field = schema.get('bugs', 'types');\n//=> ['object', 'string']\n```\n\n### [.omit](index.js#L175)\n\nOmit a property from the returned object. This method can be used\nin normalize functions as a way of removing undesired properties.\n\n**Params**\n\n* `key` **{String}**: The property to remove\n* `returns` **{Object}**: Returns the instance for chaining.\n\n### [.update](index.js#L190)\n\nUpdate a property on the returned object. This method will trigger validation\nand normalization of the updated property.\n\n**Params**\n\n* `key` **{String}**: The property to update.\n* `val` **{any}**: Value of the property to update.\n* `returns` **{Object}**: Returns the instance for chaining.\n\n### [.isOptional](index.js#L210)\n\nReturns true if field `name` is an optional field.\n\n**Params**\n\n* `name` **{String}**\n* `returns` **{Boolean}**\n\n### [.isRequired](index.js#L222)\n\nReturns true if field `name` was defined as a required field.\n\n**Params**\n\n* `name` **{String}**\n* `returns` **{Boolean}**\n\n### [.missingFields](index.js#L289)\n\nChecks the config object for missing fields and. If found,\nan error message is pushed onto the `schema.errors` array,\nwhich can be used for reporting.\n\n**Params**\n\n* `config` **{Object}**\n* `returns` **{Array}**\n\n### [.sortObject](index.js#L320)\n\nIf a `keys` array is passed on the constructor options, or as a second argument to `sortObject`, this sorts the given object so that keys are in the same order as the supplied array of `keys`.\n\n**Params**\n\n* `config` **{Object}**\n* `returns` **{Object}**: Returns the config object with keys sorted to match the given array of keys.\n\n**Example**\n\n```js\nschema.sortObject({z: '', a: ''}, ['a', 'z']);\n//=> {a: '', z: ''}\n```\n\n### [.sortArrays](index.js#L347)\n\nWhen `options.sortArrays` _is not false_, sorts all arrays in the\ngiven `config` object using JavaScript's native `.localeCompare`\nmethod.\n\n**Params**\n\n* `config` **{Object}**\n* `returns` **{Object}**: returns the config object with sorted arrays\n\n### [.isValidType](index.js#L364)\n\nReturns true if the given value is valid for field `key`.\n\n**Params**\n\n* `key` **{String}**\n* `val` **{any}**\n* `config` **{Object}**\n* `returns` **{Boolean}**\n\n### [.normalize](index.js#L441)\n\nNormalize the given `config` object.\n\n**Params**\n\n* **{String}**: key\n* **{any}**: value\n* **{Object}**: config\n* `returns` **{Object}**\n\n### [.normalizeField](index.js#L481)\n\nNormalize a field on the schema.\n\n**Params**\n\n* **{String}**: key\n* **{any}**: value\n* **{Object}**: config\n* `returns` **{Object}**\n\n### [.visit](index.js#L529)\n\nVisit `method` over the given object or array.\n\n**Params**\n\n* `method` **{String}**\n* `value` **{Object|Array}**\n* `returns` **{Object}**: Returns the instance for chaining.\n\n## [Field](lib/field.js#L28)\n\nCreate a new `Field` of the given `type` to validate against, and optional `config` object.\n\n**Params**\n\n* `type` **{String|Array}**: One more JavaScript native types to use for validation.\n* `config` **{Object}**\n\n**Example**\n\n```js\nvar field = new Field('string', {\n  normalize: function(val) {\n    // do stuff to `val`\n    return val;\n  }\n});\n```\n\n### [.isValidType](lib/field.js#L72)\n\nReturns true if the given `type` is a valid type.\n\n**Params**\n\n* `type` **{String}**\n* `returns` **{Boolean}**\n\n### [.validate](lib/field.js#L94)\n\nCalled in `schema.validate`, returns true if the given `value` is valid. This default validate method returns true unless overridden with a custom `validate` method.\n\n* `returns` **{Boolean}**\n\n**Example**\n\n```js\nvar field = new Field({\n  types: ['string']\n});\n\nfield.validate('name', {});\n//=> false\n```\n\n## Related projects\n\n[normalize-pkg](https://www.npmjs.com/package/normalize-pkg): Normalize values in package.json to improve compatibility, programmatic readability and usefulness with third party libs. | [homepage](https://github.com/jonschlinkert/normalize-pkg/)\n\n## Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm i -d && npm test\n```\n\n## Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/map-schema/issues/new).\n\n## Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright Â© 2016 [Jon Schlinkert](https://github.com/jonschlinkert)\nReleased under the MIT license.\n\n***\n\n_This file was generated by [verb](https://github.com/verbose/verb) on January 17, 2016._",
  "readmeFilename": "readme.md",
  "_id": "map-schema@0.1.1",
  "_from": "map-schema@^0.1.1"
}
