{
  "name": "base-config",
  "description": "base-methods plugin that adds a `config` method for mapping declarative configuration values to other 'base' methods or custom functions.",
  "version": "0.4.1",
  "homepage": "https://github.com/jonschlinkert/base-config",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jonschlinkert/base-config"
  },
  "bugs": {
    "url": "https://github.com/jonschlinkert/base-config/issues"
  },
  "license": "MIT",
  "files": [
    "index.js",
    "utils.js"
  ],
  "main": "index.js",
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "isobject": "^2.0.0",
    "lazy-cache": "^1.0.3",
    "map-config": "^0.4.2",
    "resolve-dir": "^0.1.0"
  },
  "devDependencies": {
    "base": "^0.6.7",
    "base-data": "^0.3.6",
    "base-option": "^0.6.1",
    "base-plugins": "^0.4.1",
    "base-store": "^0.3.6",
    "expand-args": "^0.3.4",
    "gulp": "^3.9.0",
    "gulp-eslint": "^1.1.1",
    "gulp-format-md": "^0.1.5",
    "gulp-istanbul": "^0.10.3",
    "gulp-mocha": "^2.2.0",
    "minimist": "^1.2.0",
    "mocha": "*"
  },
  "keywords": [
    "app",
    "base",
    "baseplugin",
    "cache",
    "command",
    "command-line",
    "config",
    "data",
    "extend",
    "line",
    "merge",
    "method",
    "methods",
    "plugin",
    "store"
  ],
  "verb": {
    "related": {
      "list": [
        "base-cli",
        "base-data",
        "base-methods",
        "base-options",
        "base-plugins",
        "base-store"
      ]
    },
    "reflinks": [
      "base-methods"
    ],
    "plugins": [
      "gulp-format-md"
    ]
  },
  "readme": "# base-config [![NPM version](https://img.shields.io/npm/v/base-config.svg)](https://www.npmjs.com/package/base-config) [![Build Status](https://img.shields.io/travis/jonschlinkert/base-config.svg)](https://travis-ci.org/jonschlinkert/base-config)\n\n> base-methods plugin that adds a `config` method for mapping declarative configuration values to other 'base' methods or custom functions.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm i base-config --save\n```\n\n## Usage\n\n```js\nvar config = require('base-config');\nvar base = require('base-methods');\nvar app = base();\n\n// register the plugin\napp.use(config());\n```\n\n## Mapped methods\n\nThe following methods are mapped by default, but any of them can be [overridden](#map-custom-methods) using `app.config.map()`:\n\n* `.cwd`\n* `.data`\n* `.define`\n* `.del`\n* `.disable`\n* `.disabled`\n* `.enable`\n* `.enabled`\n* `.get`\n* `.has`\n* `.option`\n* `.set`\n* `.store`\n* `.use`\n\n## Map custom methods\n\n> Map properties on a configuration object to methods on `app`.\n\nEach key on the given object should match the name of a method on `app`.\n\n```js\n// call `config` as a function\napp.config({\n  set: function(val) {\n    app.set(val);\n  }\n});\n// or use the `map` method\napp.config\n  .map('set')\n  .map('get')\n  .map('has');\n```\n\n## Process\n\nIterate over each property on the given object or array of objects, and call the mapped method that matches property key.\n\n```js\n//=> calls `app.set('foo', 'bar');\napp.config.process({set: {foo: 'bar'}}, function(err) {\n  if (err) throw err;\n});\n```\n\n## API\n\n### [create](index.js#L30)\n\nCreate a function for mapping `app` properties onto the\ngiven `prop` namespace.\n\n**Params**\n\n* `prop` **{String}**: The namespace to use\n* `argv` **{Object}**\n* `returns` **{Object}**\n\n## Other plugins\n\n* [base-cli](https://www.npmjs.com/package/base-cli): Plugin for base-methods that maps built-in methods to CLI args (also supports methods from a… [more](https://www.npmjs.com/package/base-cli) | [homepage](https://github.com/jonschlinkert/base-cli)\n* [base-data](https://www.npmjs.com/package/base-data): adds a `data` method to base-methods. | [homepage](https://github.com/jonschlinkert/base-data)\n* [base-methods](https://www.npmjs.com/package/base-methods): base-methods is the foundation for creating modular, unit testable and highly pluggable node.js applications, starting… [more](https://www.npmjs.com/package/base-methods) | [homepage](https://github.com/jonschlinkert/base-methods)\n* [base-options](https://www.npmjs.com/package/base-options): Adds a few options methods to base-methods, like `option`, `enable` and `disable`. See the readme… [more](https://www.npmjs.com/package/base-options) | [homepage](https://github.com/jonschlinkert/base-options)\n* [base-plugins](https://www.npmjs.com/package/base-plugins): Upgrade's plugin support in base-methods to allow plugins to be called any time after init. | [homepage](https://github.com/jonschlinkert/base-plugins)\n* [base-store](https://www.npmjs.com/package/base-store): Plugin for getting and persisting config values with your base-methods application. Adds a 'store' object… [more](https://www.npmjs.com/package/base-store) | [homepage](https://github.com/jonschlinkert/base-store)\n\n## Tests\n\n### Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm i -d && npm test\n```\n\n### Coverage\n\n```sh\nStatements : 100% (15/15)\nBranches   : 100% (2/2)\nFunctions  : 100% (2/2)\nLines      : 100% (15/15)\n```\n\n## Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/base-config/issues/new).\n\n## Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright © 2016 [Jon Schlinkert](https://github.com/jonschlinkert)\nReleased under the [MIT license](https://github.com/jonschlinkert/base-config/blob/master/LICENSE).\n\n***\n\n_This file was generated by [verb](https://github.com/verbose/verb), v0.9.0, on February 09, 2016._",
  "readmeFilename": "README.md",
  "_id": "base-config@0.4.1",
  "_from": "base-config@^0.4.0"
}
